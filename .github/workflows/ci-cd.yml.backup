# .github/workflows/ci-cd.yml
name: MLOps CI/CD Pipeline

on:
  # Trigger on push to main branch
  push:
    branches: [main, develop]
    paths-ignore:
      - "README.md"
      - "docs/**"

  # Trigger on pull requests
  pull_request:
    branches: [main]

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

# Global environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/api
  IMAGE_NAME_TRAINING: ${{ github.repository }}/training
  PYTHON_VERSION: "3.11"

jobs:
  # Job 1: Code Quality and Testing
  test-and-lint:
    runs-on: ubuntu-latest
    name: 🧪 Test & Lint

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort

      - name: 🎨 Code formatting check (Black)
        run: |
          black --check --diff src/ api/ tests/
        continue-on-error: true

      - name: 📏 Import sorting check (isort)
        run: |
          isort --check-only --diff src/ api/ tests/
        continue-on-error: true

      - name: 🔍 Lint code (flake8)
        run: |
          flake8 src/ api/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: 🧪 Run tests
        run: |
          pytest tests/ -v --cov=src --cov=api --cov-report=xml --cov-report=html
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 📈 Coverage comment
        if: github.event_name == 'pull_request'
        uses: 5monkeys/cobertura-action@master
        with:
          path: coverage.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 75

  # Job 2: Data and Model Validation
  validate-data-model:
    runs-on: ubuntu-latest
    name: 🔬 Validate Data & Model
    needs: test-and-lint

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🗂️ Validate data schema
        run: |
          python tests/test_data.py
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: 🤖 Run model training (validation)
        run: |
          # Run quick training to validate pipeline
          python src/models/train.py
        env:
          PYTHONPATH: ${{ github.workspace }}
          MLFLOW_TRACKING_URI: sqlite:///mlflow_test.db

      - name: 📊 Validate model performance
        run: |
          python tests/test_model_performance.py
        env:
          PYTHONPATH: ${{ github.workspace }}

  # Job 3: Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    name: 🐳 Build Docker Images
    needs: validate-data-model
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      training-image: ${{ steps.meta-training.outputs.tags }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract API metadata
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏷️ Extract Training metadata
        id: meta-training
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_TRAINING }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.api
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=${{ github.sha }}

      - name: 🔨 Build and push Training image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.train
          push: true
          tags: ${{ steps.meta-training.outputs.tags }}
          labels: ${{ steps.meta-training.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: 🔒 Security Scan
    needs: build-images

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-images.outputs.api-image }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

      - name: 🛡️ Dependency vulnerability check
        run: |
          pip install safety
          safety check -r requirements.txt
        continue-on-error: true

  # Job 5: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Staging
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: staging
      url: http://staging.yourcompany.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Here you would add your actual deployment commands
          # Examples:
          # - kubectl apply -f k8s/
          # - docker-compose -f docker-compose.staging.yml up -d
          # - AWS ECS deployment
          # - Azure Container Apps deployment

          # For now, we'll simulate deployment
          echo "API Image: ${{ needs.build-images.outputs.api-image }}"
          echo "Training Image: ${{ needs.build-images.outputs.training-image }}"

      - name: 🔍 Health check
        run: |
          # Wait for deployment to be ready
          sleep 30

          # Check if API is responding (replace with your staging URL)
          # curl -f http://staging.yourcompany.com/health || exit 1
          echo "Health check passed (simulated)"

      - name: 🧪 Run integration tests
        run: |
          python -m pytest tests/integration/ -v
        env:
          API_BASE_URL: http://staging.yourcompany.com

  # Job 6: Deploy to Production (Manual Approval)
  deploy-production:
    runs-on: ubuntu-latest
    name: 🏭 Deploy to Production
    needs: [build-images, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://api.yourcompany.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏭 Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "API Image: ${{ needs.build-images.outputs.api-image }}"
          echo "Training Image: ${{ needs.build-images.outputs.training-image }}"

          # Production deployment commands would go here
          # kubectl set image deployment/api api=${{ needs.build-images.outputs.api-image }}

      - name: 🔍 Production health check
        run: |
          sleep 60  # Wait for rollout
          # curl -f https://api.yourcompany.com/health || exit 1
          echo "Production health check passed (simulated)"

      - name: 📢 Notify deployment
        if: success()
        run: |
          echo "🎉 Successfully deployed to production!"
          # Add notifications here (Slack, Teams, email, etc.)

  # Job 7: Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    name: ⚡ Performance Test
    needs: deploy-staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install load testing tools
        run: |
          pip install locust requests

      - name: ⚡ Run performance tests
        run: |
          # Run load tests against staging
          python tests/performance/load_test.py
        env:
          API_BASE_URL: http://staging.yourcompany.com
          TEST_DURATION: 60s
          USERS: 10

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance_results.json
