name: Deploy to EC2

on:
  workflow_dispatch:
    inputs:
      run_tests:
        description: "Run tests before deployment"
        required: true
        default: "true"
        type: choice
        options:
          - "true"
          - "false"
      restart_services:
        description: "Restart services after deployment"
        required: true
        default: "true"
        type: choice
        options:
          - "true"
          - "false"

env:
  PYTHON_VERSION: "3.12"

jobs:
  # Job 1: Run Tests (Optional)
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.run_tests == 'true'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: 📁 Create required directories
        run: |
          mkdir -p data/processed data/features data/raw

      - name: 🧪 Run integration tests
        run: |
          python -m pytest tests/integration/test_integration.py -v
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: ✅ Tests passed
        run: |
          echo "✅ All tests passed successfully!"

  # Job 2: Deploy to EC2
  deploy:
    name: 🚀 Deploy to EC2
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>&1 || true

          # Create SSH config for better connection handling
          cat >> ~/.ssh/config << EOF
          Host ec2-deploy
            HostName ${{ secrets.EC2_HOST }}
            User ${{ secrets.EC2_USERNAME }}
            IdentityFile ~/.ssh/deploy_key
            ServerAliveInterval 60
            ServerAliveCountMax 5
            StrictHostKeyChecking no
            ConnectTimeout 30
          EOF
          chmod 600 ~/.ssh/config

      - name: 🔍 Test SSH Connection
        run: |
          echo "Testing SSH connection to EC2..."
          ssh ec2-deploy "echo '✅ SSH connection successful' && uptime"

      - name: 📤 Pull latest code
        run: |
          ssh ec2-deploy "cd ~/Predictive-Maintenance-with-MLOps && git fetch origin && git reset --hard origin/main && echo 'Code updated successfully'"

      - name: 📦 Install dependencies
        run: |
          ssh ec2-deploy "cd ~/Predictive-Maintenance-with-MLOps && source venv/bin/activate && pip install -r requirements.txt --quiet && echo 'Dependencies installed'"

      - name: 🔄 Restart API Service
        if: github.event.inputs.restart_services == 'true'
        run: |
          ssh ec2-deploy "sudo systemctl restart mlops-api && echo 'API service restart initiated'"

      - name: ⏳ Wait for service
        if: github.event.inputs.restart_services == 'true'
        run: sleep 10

      - name: ✅ Check API service status
        if: github.event.inputs.restart_services == 'true'
        run: |
          ssh ec2-deploy "sudo systemctl is-active mlops-api && echo '✅ API service is running' || (echo '❌ API service failed' && sudo journalctl -u mlops-api -n 30 --no-pager && exit 1)"

      - name: 🔄 Reload Nginx
        if: github.event.inputs.restart_services == 'true'
        run: |
          ssh ec2-deploy "sudo systemctl reload nginx && echo 'Nginx reloaded'"

      - name: 🏥 Health Check
        run: |
          echo "🏥 Checking API health..."
          sleep 5
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:8000/ || echo "000")

          if [ "$response" -eq 200 ]; then
            echo "✅ API is healthy (HTTP $response)"
          else
            echo "⚠️ API health check returned HTTP $response"
            echo "Note: Port 8000 might not be accessible from outside, but API may be running internally"
          fi

      - name: 🧹 Cleanup
        if: always()
        run: rm -f ~/.ssh/deploy_key

  # Job 3: Deployment Summary
  summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()

    steps:
      - name: 📊 Generate Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "### ✅ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🌐 **API:** http://${{ secrets.EC2_HOST }}:8000" >> $GITHUB_STEP_SUMMARY
            echo "📚 **API Docs:** http://${{ secrets.EC2_HOST }}:8000/docs" >> $GITHUB_STEP_SUMMARY
            echo "🎨 **UI:** http://${{ secrets.EC2_HOST }}/" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Deployment Failed!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above for error details." >> $GITHUB_STEP_SUMMARY
          fi
