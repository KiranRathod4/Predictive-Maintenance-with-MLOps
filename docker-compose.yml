# docker-compose.yml
# Multi-service setup for complete MLOps pipeline

version: '3.8'

services:
  # MLflow Tracking Server
  mlflow:
    image: python:3.11-slim
    container_name: mlflow-server
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/mlflow
      - ./mlruns:/mlruns
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow/mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlruns
    command: >
      bash -c "
        pip install mlflow[extras] &&
        mlflow server 
        --host 0.0.0.0 
        --port 5000 
        --backend-store-uri sqlite:///mlflow/mlflow.db 
        --default-artifact-root /mlruns
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Training Service
  training:
    build:
      context: .
      dockerfile: docker/Dockerfile.train
    container_name: model-training
    volumes:
      - ./data:/workspace/data
      - ./models:/workspace/models
      - ./reports:/workspace/reports
      - ./mlruns:/workspace/mlruns
      - training_logs:/workspace/logs
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - PYTHONPATH=/workspace
    depends_on:
      mlflow:
        condition: service_healthy
    profiles:
      - training  # Only start when explicitly requested
    restart: "no"  # Don't restart training containers

  # API Service
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
      args:
        BUILD_DATE: ${BUILD_DATE:-2025-09-18}
        VERSION: ${API_VERSION:-1.0.0}
    container_name: prediction-api
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models:ro  # Read-only model access
      - ./train_metrics.json:/app/train_metrics.json:ro
      - api_logs:/app/logs
    environment:
      - MODEL_PATH=/app/models/model.pkl
      - METRICS_PATH=/app/train_metrics.json
      - API_VERSION=${API_VERSION:-1.0.0}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      - mlflow

  # Monitoring Service (Prometheus - optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro 
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring  # Only start when explicitly requested
    restart: unless-stopped

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    profiles:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

# Named volumes for persistent data
volumes:
  mlflow_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  training_logs:
    driver: local
  api_logs:
    driver: local

# Networks
networks:
  default:
    name: mlops-network
    driver: bridge

